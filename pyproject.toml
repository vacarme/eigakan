[tool.poetry]
name = "eigakan"
version = "0.1.0"
description = ""
authors = ["Vacarme <ironex@gmail.com>"]
readme = "README.md"
repository = "https://github.com/vacarme/eigakan.git"
packages = [{include = "eigakan", from = "src"}]

[tool.poetry.dependencies]
python = "^3.12"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.31"}
psycopg = {extras = ["c"], version = "^3.1.19"}
geoalchemy2 = "^0.15.1"
fastapi-slim = "^0.111.0"
uvicorn = {extras = ["standard"], version = "^0.30.1"}
slowapi = "^0.1.9"
argon2-cffi = "^23.1.0"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
python-multipart = "^0.0.9"

[tool.poetry.group.db]
optional = true
[tool.poetry.group.db.dependencies]
geopandas = {version = "^1.0.1"}

[tool.poetry.group.quality]
optional = true

[tool.poetry.group.quality.dependencies]
ruff = "^0"
mypy = "^1"
pytest = "^8.3.2"
sqlalchemy-utils = "^0.41.2"
pytest-asyncio = "^0.23.8"
httpx = "^0.27.0"
async-factory-boy = "^1.0.1"
coverage = "^7.6.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
seed = "eigakan.cli:seed"
drop = "eigakan.cli:drop"

[tool.ruff]
line-length = 79
target-version = "py312"

[tool.ruff.lint]
select = ["E", "F", "C", "B", "PL", "I", "W", "S", "RUF", "TRY"] # D
[tool.ruff.lint.isort]
known-first-party = ["eigakan"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "D104"]
"src/eigakan/**/dependencies.py" = ["B008"] # Do not perform function calls in argument defaults
"src/eigakan/**/router.py" = ["PLR0913"] # Too many arguments in function definition
"tests/**/*.py" = [
  "PLR2004",  # Magic value used in comparison, consider replacing with a constant variable
  "PLR0913",  # Too many arguments
  "D", # Everything docstrings related 
  "S101", # Use of assert detected,
  "PLC2401", # Not ascii character
]
[tool.pytest.ini_options]
asyncio_mode = "auto"

[tool.coverage.run]
branch = true
data_file = ".reports/.coverage"
source = ["src"]
concurrency = ["greenlet", "thread"]

[tool.coverage.report]
# fail_under = 70
exclude_lines = ["pragma: no cover", "if TYPE_CHECKING:", "@(abc\\.)?abstractmethod", "@(abc\\.)?abstractproperty", "def __str__"]
skip_covered = true

[tool.coverage.html]
directory = ".reports/html"

[tool.coverage.xml]
output = ".reports/coverage.xml"
